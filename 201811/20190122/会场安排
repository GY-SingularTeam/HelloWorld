  import java.util.ArrayList;
	import java.util.Collections;
	import java.util.Comparator;
	import java.util.List;
	import java.util.Scanner;
	
	/*
	 * 在同一个会议室需要开许多会议，但是由于会议太多，需求总是无法被满足，
	 * 你能否设计一个算法让这个会议室安排尽可能多的会议呢。（一个会议的结束时间可与另一个会议的开始时间重叠）
	第一行输入：会议总数
	以下输入各会议的开始时间与结束时间
	输出：最多能排多少个会议
	例：
	输入
	10
	3 6
	1 4 
	5 7
	2 5 
	5 9 
	3 8 
	8 11
	6 10
	8 12
	12 14
	输出
	4
	
	贪心策略:
	最开始的会议时间和持续时间最短的会议
	
	那就是每一步选最早结束的时间
	
	 * */
	class date{
		int begin,end;
	}
	public class Main {
		public static void main(String[] args) {
			Scanner sr = new Scanner(System.in);
	
			List<date> list = new ArrayList<date>();
			int count = 0;
			int n = sr.nextInt();
			for(int i = 0; i < n; i++){
				date d1 = new date();
	
				d1.begin = sr.nextInt();
				d1.end = sr.nextInt();
	
				list.add(d1);
			}
	
			Collections.sort(list, new Comparator<Object>() {
	
				@Override
				public int compare(Object arg0, Object arg1) {
					date d1 = (date)arg0;
					date d2 = (date)arg1;
	
	        //如果会场结束时间相同，按会场开始时间从大到小排
					if(d1.end == d2.end)
						return d1.begin < d2.begin ? 1 : -1;
	
	        //按会场结束时间，从小到大排
					return d1.end > d2.end ? 1 : -1;
				}
			});
	
			int end = 0;
			for(int i = 0; i < n; i++){
				if(list.get(i).begin >= end){
					count++;
	
					end = list.get(i).end;
	
				}
			}
	
			System.out.println(count);
	
			sr.close();
	
		}
	}
