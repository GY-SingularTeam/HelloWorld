
import java.util.Scanner;

/*
 * 对于n个点的连通图，只需要n-1条边就能使它连通，我们只需要找出n-1条边的最小权值和即可（例如五个点只需要四条线就能连通，找出这四条权值边即可）
输入：
第一行点数n，边数m
输入节点x，y，边值z
最后一行输入所在源点
输出：
最小生成树的权值

例：
输入：
7  12
1  2  23
1  6  28
1  7  36
2  3  20
2  7  1
3  4  15
3  7  4
4  5  3
4  7  9
5  6  17
5  7  16
6  7  25
1
输出
57
 * */
public class Main {
	public static void main(String[] args) {
		Scanner sr = new Scanner(System.in);
		
		int n = sr.nextInt();
		int m = sr.nextInt();
		
		int [][] mat = new int[n][n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				if(i != j)
					mat[i][j] = Integer.MAX_VALUE;
				else
					mat[i][j] = 0;
			}
		}
		
		for(int i = 0; i < m; i++){
			int xi = sr.nextInt() - 1;
			int yi = sr.nextInt() - 1;
			int temp = sr.nextInt();
			
			
			if(xi == yi){
				mat[xi][yi] = mat[yi][xi] = 0;
				
				continue;
			}else{
				if(mat[xi][yi] > temp)
					mat[xi][yi] = mat[yi][xi] = temp;
			}
			
		}
		
		int min = fun(mat);
		
		System.out.println(min);
		sr.close();
	}
	
	public static int fun(int [][] mat){
		int min = 0, k,sum = 0;
		int [] adjvex = new int[mat.length];
		int [] lowcost = new int[mat.length];
		
		adjvex[0] = 0;
		lowcost[0] = 0;
		
		//初使化
		for(int i = 1; i < mat.length; i++){
			lowcost[i] = mat[0][i];
			
			adjvex[i] = 0;
		}
		
		for(int i = 1; i < mat.length; i++){
			min = Integer.MAX_VALUE;
			k = 0;
			
			for(int j = 1; j < mat.length; j++){
				if(lowcost[j] != 0 && lowcost[j] < min){
					min = lowcost[j];
					
					k = j;
				}
			}
			sum += min;
			
			lowcost[k] = 0;
				
			for(int j = 1; j < mat.length; j++){
				if(lowcost[j] != 0 && mat[k][j] < lowcost[j]){
					lowcost[j] = mat[k][j];
					
					adjvex[j] = k;
				}
			}
			
		}
		
		return sum;
	}
}
